#pragma kernel CSMain

RWTexture2DArray<float> terrainMap;     // output texture storing density function values.
float3 rootCoord;

// example density function without noise.
// tool to help visualize (must adjust values in this script):
// http://www.math3d.org/
float SampleSlope(float3 coord) {
    float eq_result;
    coord = coord + rootCoord;                      // root coord represents the base of this block.
    coord = float3(coord.z, coord.x, coord.y);      // re-orient the coordinates to correspond to correct ws orientation.
    
    // you can make complex functions to represent the terrain like so.
    eq_result = (sin(0.07 * pow(coord.x, 2) + 0.07 * pow(coord.y, 2)));
    eq_result += pow(coord.x / 4, 1.2) + pow(coord.y / 4, 1.2);

    // above functions are calculated with z = xy style functions, this adjusts it to isolate the float result.
    return eq_result + 16 - coord.z;
}

// gradient noise stuff
float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

float Unity_GradientNoise_float(float2 UV, float Scale)
{
    return unity_gradientNoise(UV * Scale) + 0.5;
}

// actual density function.
float Density(float3 coord) {
    coord = coord + rootCoord;     // root coord represents the base of this block.

    float density;

    float2 noise_inputs = float2(coord.x/10, coord.z/10);
    float noise_val = 0;

    noise_val += Unity_GradientNoise_float(noise_inputs, 3) * 2.5;
    noise_val += Unity_GradientNoise_float(noise_inputs, 1) * 5;
    noise_val +=  Unity_GradientNoise_float(noise_inputs, 0.5) * 10;
    noise_val +=  Unity_GradientNoise_float(noise_inputs, 0.25) * 20;
    noise_val +=  Unity_GradientNoise_float(noise_inputs, 0.12) * 40;

    density = noise_val;

    return density - coord.y;
}

[numthreads(11,11,3)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // terrainMap[id.xyz] = SampleSlope(float3(id.xyz));
    terrainMap[id.xyz] = Density(float3(id.xyz));
}
