#pragma kernel CSMain

RWTexture2DArray<float> terrainMap;     // output texture storing density function values.
float3 rootCoord;


// < generated from shadergraph node >
float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

// < generated from shadergraph node >
float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

// < generated from shadergraph node >
float Unity_GradientNoise_float(float2 UV, float Scale)
{
    return unity_gradientNoise(UV * Scale) + 0.5;
}


// 3D Perlin Noise (close enough) function shared online commonly, modified to work with above gradient noise shader graph code.
float Perlin3D(float3 input, float Scale) {
    float ab = unity_gradientNoise(float2(input.x, input.y) * Scale) + 0.5;
    float bc = unity_gradientNoise(float2(input.y, input.z) * Scale) + 0.5;
    float ac = unity_gradientNoise(float2(input.x, input.z) * Scale) + 0.5;

    float ba = unity_gradientNoise(float2(input.y, input.x) * Scale) + 0.5;
    float cb = unity_gradientNoise(float2(input.z, input.y) * Scale) + 0.5;
    float ca = unity_gradientNoise(float2(input.z, input.x) * Scale) + 0.5;

    float abc = ab + bc + ac + ba + cb + ca;
    return abc / 6.0;
}


// basic 3D sin function with some adjustable parameters.
    float my_sin(float3 coord, float frequency, float amplitude) {
        return sin(frequency * coord.x) * sin(frequency * coord.z) * amplitude;
    }


// Ripple function.
float ripple(float3 coord, float frequency, float amplitude) {
    return ( sin(frequency * pow(coord.x, 2) + frequency * pow(coord.z, 2)) ) * amplitude;
}

float complex_noise(float3 coord) {
    float offset = 100;
    float3 newBase = coord + float3(offset, offset, offset);
    float output = 0;

    // output += Perlin3D(newBase, 0.04) * 201.2;
    output += Perlin3D(newBase, 0.11) * 65.1;
    output += Perlin3D(newBase, 0.223) * 32.4;

    return output;

}


// example density function without noise.
// tool to help visualize (must adjust values in this script):
// http://www.math3d.org/
float SampleSlope(float3 coord) {
    
    // root coord represents the base of this block.
    coord = coord + rootCoord;

    float output;

    // adjustable 3D sin function.
    output = my_sin(coord, 0.25, 2);
    
    // ripple function.
    // output = ripple(coord, 0.05, 1);

    // complex noise function.
    // output = complex_noise(coord) - 55;

    return output + 16 - coord.y;
}


// actual density function.
float Density(float3 coord) {

    // Coordinate manipulation.
    coord = coord + rootCoord;     // root coord represents the base of this block.
    float offset = 100;             // for some reason noise close to 0, 0, 0 is only 2D.
    float3 noise_inputs = coord + float3(offset, offset, offset);

    // This is the value that will eventually be returned to represent the terrain.
    float density = 0;

    // Adding complexity with 3D Perlin Noise.
    float noise_val = 0;
    noise_val += Perlin3D(noise_inputs, 0.04) * 201.2;
    noise_val += Perlin3D(noise_inputs, 0.11) * 65.1;
    noise_val += Perlin3D(noise_inputs, 1.1) * 10.4;
    density += noise_val;

    return density - coord.y;
}

[numthreads(11,11,3)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // terrainMap[id.xyz] = SampleSlope(float3(id.xyz));
    terrainMap[id.xyz] = Density(float3(id.xyz));
}
